sort1 uses: Bubble Sort

How do you know?: I's possible to analyze that the compilation time increases with O(n²) - random 10,000: 0.305s, random 50,000: 8.465s = 27* random 10,000 time (near 25* random 10,000 time ) - meaning that's either bubble or selection sort. I considered that's a bubble sort because that algorithm has multiple terms in the equation of O(n²) that impacts the compilation time as the data increases, turning into a worse method than the selection sort when using a large scale of data(sort1 random50,000 = 8.465s , sort3 random50,000 = 4.045s )

sort2 uses: Merge Sort

How do you know?: because it's the fastest algorithm in all the cases, and have only a slightly increase in compilation time ( from 0.067s - reversed 10,000 - to 0.713s- reversed 50,000 for ex ), meaning that's probably a recursion with O(n*logn)

sort3 uses: Selection Sort

How do you know?: I's possible to analyze that the compilation time increases with O(n²) - random 10,000: 0.305s, random 50,000: 8.465s = 27* random 10,000 time (near 25* random 10,000 time ) - meaning that's either bubble or selection sort. I considered that's a selection sort because the worst case scenario is better than the sort1 counterpart as data increases, and we know that selection sort is faster than bubble for multiple data (sort1 random50,000 = 8.465s , sort3 random50,000 = 4.045s )
